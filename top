[1mdiff --cc src/main/java/com/agileactors/chapteree_app/controller/CustomerController.java[m
[1mindex 907fee1,4ad6df2..0000000[m
[1m--- a/src/main/java/com/agileactors/chapteree_app/controller/CustomerController.java[m
[1m+++ b/src/main/java/com/agileactors/chapteree_app/controller/CustomerController.java[m
[36m@@@ -27,9 -27,9 +27,15 @@@[m [mpublic class CustomerController [m
      }[m
  [m
      @GetMapping[m
[32m++<<<<<<< HEAD[m
[32m +    @RequestMapping(value = "{id}")[m
[32m +    public ResponseEntity<?> get(@PathVariable Long id){[m
[32m +       return customerService.getById(id);[m
[32m++=======[m
[32m+     @RequestMapping("{id}")[m
[32m+     public ResponseEntity<?> get(@PathVariable Long id){[m
[32m+         return customerService.getById(id);[m
[32m++>>>>>>> origin/orebranch[m
      }[m
  [m
      @PostMapping[m
[1mdiff --cc src/main/java/com/agileactors/chapteree_app/exception/RestResponseExceptionHandler.java[m
[1mindex 1685981,16afb57..0000000[m
[1m--- a/src/main/java/com/agileactors/chapteree_app/exception/RestResponseExceptionHandler.java[m
[1m+++ b/src/main/java/com/agileactors/chapteree_app/exception/RestResponseExceptionHandler.java[m
[36m@@@ -18,10 -18,13 +18,20 @@@[m [mpublic class RestResponseExceptionHandl[m
      protected ResponseEntity<Object> invalidLevelHandler(Exception e){[m
          return new ResponseEntity<>("Invalid Level", HttpStatus.NOT_FOUND);[m
      }[m
[32m++<<<<<<< HEAD[m
[32m +[m
[32m +    @ExceptionHandler(value = DataAccessException.class)[m
[32m +    protected ResponseEntity<Object> invalidPost([m
[32m +            RuntimeException ex) {[m
[32m++=======[m
[32m+     @ExceptionHandler(value = NoCoachException.class)[m
[32m+     protected ResponseEntity<Object> noCoachHandler(Exception e){[m
[32m+         return new ResponseEntity<>("Chapteree has no coach", HttpStatus.NOT_FOUND);[m
[32m+     }[m
[32m+ [m
[32m+     @ExceptionHandler(value = DataAccessException.class)[m
[32m+     protected ResponseEntity<Object> invalidPostBodyException(Runtime ex){[m
[32m++[m
          return new ResponseEntity<>("All fields required", HttpStatus.BAD_REQUEST);[m
      }[m
  }[m
[1mdiff --cc src/main/java/com/agileactors/chapteree_app/model/Chapteree.java[m
[1mindex 65fb06f,734d4db..0000000[m
[1m--- a/src/main/java/com/agileactors/chapteree_app/model/Chapteree.java[m
[1m+++ b/src/main/java/com/agileactors/chapteree_app/model/Chapteree.java[m
[36m@@@ -17,17 -27,27 +27,37 @@@[m [mpublic class Chapteree [m
          this.lastName = lastName;[m
          this.chapter = chapter;[m
          this.level = level;[m
[32m+         this.coachId=null;[m
      }[m
  [m
[32m++<<<<<<< HEAD[m
[32m +    public Chapteree(Long chaptereeId, String firstName, String lastName, String chapter, String level, Long customerId) {[m
[32m++=======[m
[32m+     public Chapteree(Long chaptereeId, String firstName, String lastName, String chapter, String level, Long coachId, Long customerId) {[m
[32m++>>>>>>> origin/orebranch[m
          this.chaptereeId = chaptereeId;[m
          this.firstName = firstName;[m
          this.lastName = lastName;[m
          this.chapter = chapter;[m
          this.level = level;[m
[32m++<<<<<<< HEAD[m
[32m +        this.customerId = customerId;[m
[32m +    }[m
[32m +[m
[32m++=======[m
[32m+         this.coachId = coachId;[m
[32m+         this.customerId = customerId;[m
[32m+     }[m
[32m+ [m
[32m+     public Long getCoachId() {[m
[32m+         return coachId;[m
[32m+     }[m
[32m+ [m
[32m+     public void setCoachId(Long coachId) {[m
[32m+         this.coachId = coachId;[m
[32m+     }[m
[32m+ [m
[32m++>>>>>>> origin/orebranch[m
      public Long getCustomerId() {[m
          return customerId;[m
      }[m
[36m@@@ -36,6 -56,7 +66,10 @@@[m
          this.customerId = customerId;[m
      }[m
  [m
[32m++<<<<<<< HEAD[m
[32m++=======[m
[32m+ [m
[32m++>>>>>>> origin/orebranch[m
      public enum Level { LOW,[m
          MID,[m
          HIGH;}[m
[36m@@@ -56,6 -77,9 +90,12 @@@[m
      @Column(name = "level")[m
      private String level;[m
  [m
[32m++<<<<<<< HEAD[m
[32m++=======[m
[32m+     @Column(name="coach_id")[m
[32m+     private Long coachId;[m
[32m+ [m
[32m++>>>>>>> origin/orebranch[m
      @Column(name = "customer_id")[m
      private Long customerId;[m
  [m
[1mdiff --cc src/main/java/com/agileactors/chapteree_app/model/Customer.java[m
[1mindex 3d15aa8,f9845ce..0000000[m
[1m--- a/src/main/java/com/agileactors/chapteree_app/model/Customer.java[m
[1m+++ b/src/main/java/com/agileactors/chapteree_app/model/Customer.java[m
[36m@@@ -3,24 -3,23 +3,42 @@@[m [mpackage com.agileactors.chapteree_app.m[m
  import com.fasterxml.jackson.annotation.JsonIgnoreProperties;[m
  [m
  import javax.persistence.*;[m
[32m++<<<<<<< HEAD[m
[32m +import java.util.List;[m
[32m++=======[m
[32m++>>>>>>> origin/orebranch[m
  [m
  @Entity(name = "customer")[m
  @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})[m
  public class Customer {[m
  [m
[32m++<<<<<<< HEAD[m
[32m +        public Customer() { }[m
[32m +[m
[32m +        @Id[m
[32m +        @GeneratedValue(strategy = GenerationType.IDENTITY)[m
[32m +        @Column(name="customer_id")[m
[32m +        private Long customerId;[m
[32m +[m
[32m +        @Column(name = "first_name")[m
[32m +        private java.lang.String firstName;[m
[32m +[m
[32m +        @Column(name = "last_name")[m
[32m +        private java.lang.String lastName;[m
[32m++=======[m
[32m+     public Customer() { }[m
[32m+ [m
[32m+     @Id[m
[32m+     @GeneratedValue(strategy = GenerationType.IDENTITY)[m
[32m+     @Column(name="customer_id")[m
[32m+     private Long customerId;[m
[32m+ [m
[32m+     @Column(name = "first_name")[m
[32m+     private java.lang.String firstName;[m
[32m+ [m
[32m+     @Column(name = "last_name")[m
[32m+     private java.lang.String lastName;[m
[32m++>>>>>>> origin/orebranch[m
  [m
      public Customer(Long customerId, String firstName, String lastName) {[m
          this.customerId = customerId;[m
[1mdiff --cc src/main/java/com/agileactors/chapteree_app/repository/CustomerRepository.java[m
[1mindex 71d87c5,37573cd..0000000[m
[1m--- a/src/main/java/com/agileactors/chapteree_app/repository/CustomerRepository.java[m
[1m+++ b/src/main/java/com/agileactors/chapteree_app/repository/CustomerRepository.java[m
[36m@@@ -12,7 -12,7 +12,11 @@@[m [mimport java.util.List[m
  @Repository[m
  public interface CustomerRepository extends JpaRepository<Customer, Long> {[m
  [m
[32m++<<<<<<< HEAD[m
[32m +    @Query(value = "select chapteree_id, first_name, last_name from chapteree where customer_id = ?1", nativeQuery = true) //chapteree_customer[m
[32m++=======[m
[32m+     @Query(value = "select chapteree_id, first_name, last_name from chapteree where customer_id = ?1", nativeQuery = true)[m
[32m++>>>>>>> origin/orebranch[m
      List<String> myChapterees(Long id);[m
  [m
  }[m
[1mdiff --cc src/main/resources/db/migration/V1__setup.sql[m
[1mindex f47b799,6677933..0000000[m
[1m--- a/src/main/resources/db/migration/V1__setup.sql[m
[1m+++ b/src/main/resources/db/migration/V1__setup.sql[m
[36m@@@ -1,10 -1,11 +1,19 @@@[m
  create table chapteree[m
  ([m
[32m++<<<<<<< HEAD[m
[32m +	chapteree_id    INT UNSIGNED NOT NULL AUTO_INCREMENT,[m
[32m +    first_name      varchar(30) NOT NULL,[m
[32m +    last_name       varchar(30) NOT NULL,[m
[32m +    chapter		    varchar(30) NOT NULL,[m
[32m +    level		    varchar(30) NOT NULL,[m
[32m++=======[m
[32m+ 	chapteree_id  INT UNSIGNED NOT NULL AUTO_INCREMENT,[m
[32m+     first_name   varchar(30) NOT NULL,[m
[32m+     last_name  varchar(30) NOT NULL,[m
[32m+     chapter		varchar(30) NOT NULL,[m
[32m+     level		varchar(30) NOT NULL,[m
[32m+     coach_id    INT UNSIGNED,[m
[32m++>>>>>>> origin/orebranch[m
      customer_id     INT UNSIGNED,[m
  	PRIMARY KEY (chapteree_id)[m
  );[m
[1mdiff --cc src/test/java/com/agileactors/chapteree_app/controller/CustomerControllerTest.java[m
[1mindex 82269ee,2366563..0000000[m
[1m--- a/src/test/java/com/agileactors/chapteree_app/controller/CustomerControllerTest.java[m
[1m+++ b/src/test/java/com/agileactors/chapteree_app/controller/CustomerControllerTest.java[m
[36m@@@ -1,7 -1,8 +1,12 @@@[m
  package com.agileactors.chapteree_app.controller;[m
  [m
  [m
[32m++<<<<<<< HEAD[m
[32m +import com.agileactors.chapteree_app.integrationtest.BaseIntegrity;[m
[32m++=======[m
[32m+ [m
[32m+ import com.agileactors.chapteree_app.integrationtest.CustomerBaseIntegrity;[m
[32m++>>>>>>> origin/orebranch[m
  import com.agileactors.chapteree_app.integrationtest.ResponseUtils;[m
  import com.agileactors.chapteree_app.model.Customer;[m
  import com.agileactors.chapteree_app.service.CustomerService;[m
[36m@@@ -24,7 -25,7 +29,11 @@@[m [mimport static org.springframework.test.[m
  [m
  @SpringBootTest[m
  @AutoConfigureMockMvc[m
[32m++<<<<<<< HEAD[m
[32m +public class CustomerControllerTest extends BaseIntegrity {[m
[32m++=======[m
[32m+ public class CustomerControllerTest extends CustomerBaseIntegrity {[m
[32m++>>>>>>> origin/orebranch[m
      @SpyBean[m
      CustomerService customerService;[m
  [m
[1mdiff --cc src/test/java/com/agileactors/chapteree_app/exceptions/CustomerExceptionsTest.java[m
[1mindex cef8427,9822730..0000000[m
[1m--- a/src/test/java/com/agileactors/chapteree_app/exceptions/CustomerExceptionsTest.java[m
[1m+++ b/src/test/java/com/agileactors/chapteree_app/exceptions/CustomerExceptionsTest.java[m
[36m@@@ -2,9 -2,7 +2,13 @@@[m [mpackage com.agileactors.chapteree_app.e[m
  [m
  import com.agileactors.chapteree_app.controller.CustomerController;[m
  import com.agileactors.chapteree_app.exception.InvalidIdException;[m
[32m++<<<<<<< HEAD[m
[32m +import com.agileactors.chapteree_app.exception.InvalidLevelException;[m
  import com.agileactors.chapteree_app.model.Customer;[m
[32m +import com.agileactors.chapteree_app.service.CustomerService;[m
[32m++=======[m
[32m++import com.agileactors.chapteree_app.model.Customer;[m
[32m++>>>>>>> origin/orebranch[m
  import org.junit.jupiter.api.Test;[m
  import org.springframework.beans.factory.annotation.Autowired;[m
  import org.springframework.boot.test.context.SpringBootTest;[m
[36m@@@ -13,7 -11,7 +17,11 @@@[m [mimport org.springframework.test.context[m
  import static org.junit.jupiter.api.Assertions.assertThrows;[m
  [m
  @SpringBootTest[m
[32m++<<<<<<< HEAD[m
[32m +@TestPropertySource(locations = "classpath:application_test.properties")[m
[32m++=======[m
[32m+ @TestPropertySource(locations = "classpath:application-flyway_test.properties")[m
[32m++>>>>>>> origin/orebranch[m
  public class CustomerExceptionsTest {[m
  [m
  [m
[1mdiff --cc src/test/java/com/agileactors/chapteree_app/integrationtest/ChaptereeIntegrationTest.java[m
[1mindex 2e5ffc6,4fde032..0000000[m
[1m--- a/src/test/java/com/agileactors/chapteree_app/integrationtest/ChaptereeIntegrationTest.java[m
[1m+++ b/src/test/java/com/agileactors/chapteree_app/integrationtest/ChaptereeIntegrationTest.java[m
[36m@@@ -21,9 -20,8 +20,12 @@@[m [mimport static org.springframework.test.[m
  [m
  @ExtendWith({DBUnitExtension.class, SpringExtension.class})[m
  @SpringBootTest[m
[32m++<<<<<<< HEAD:src/test/java/com/agileactors/chapteree_app/integrationtest/IntegrationTest.java[m
[32m +//@TestPropertySource(locations = "classpath:application_test.properties")[m
[32m++=======[m
[32m++>>>>>>> origin/orebranch:src/test/java/com/agileactors/chapteree_app/integrationtest/ChaptereeIntegrationTest.java[m
  @AutoConfigureMockMvc[m
[31m- public class IntegrationTest extends BaseIntegrity{[m
[32m+ public class ChaptereeIntegrationTest extends ChaptereeBaseIntegrity {[m
      @Autowired[m
      private MockMvc mockMvc;[m
  [m
[1mdiff --cc src/test/java/com/agileactors/chapteree_app/integrationtest/CustomerIntegrationTest.java[m
[1mindex e214358,d79554b..0000000[m
[1m--- a/src/test/java/com/agileactors/chapteree_app/integrationtest/CustomerIntegrationTest.java[m
[1m+++ b/src/test/java/com/agileactors/chapteree_app/integrationtest/CustomerIntegrationTest.java[m
[36m@@@ -22,7 -22,7 +22,11 @@@[m [mimport static org.springframework.test.[m
  @ExtendWith({DBUnitExtension.class, SpringExtension.class})[m
  @SpringBootTest[m
  @AutoConfigureMockMvc[m
[32m++<<<<<<< HEAD[m
[32m +public class CustomerIntegrationTest extends BaseIntegrity{[m
[32m++=======[m
[32m+ public class CustomerIntegrationTest extends CustomerBaseIntegrity{[m
[32m++>>>>>>> origin/orebranch[m
      @Autowired[m
      private MockMvc mockMvc;[m
  [m
[1mdiff --cc src/test/java/com/agileactors/chapteree_app/repository/ChaptereeRepositoryTest.java[m
[1mindex 35343ec,24947d3..0000000[m
[1m--- a/src/test/java/com/agileactors/chapteree_app/repository/ChaptereeRepositoryTest.java[m
[1m+++ b/src/test/java/com/agileactors/chapteree_app/repository/ChaptereeRepositoryTest.java[m
[36m@@@ -13,9 -12,11 +13,14 @@@[m [mimport static org.junit.Assert.assertFa[m
  import static org.junit.jupiter.api.Assertions.assertEquals;[m
  [m
  import java.util.List;[m
[32m++<<<<<<< HEAD[m
[32m++=======[m
[32m+ import java.util.Optional;[m
[32m+ import java.util.stream.Collectors;[m
[32m++>>>>>>> origin/orebranch[m
  [m
  @SpringBootTest[m
[31m -@TestPropertySource(locations = "classpath:application-flyway_test.properties")[m
[32m +@TestPropertySource(locations = "classpath:application_test.properties")[m
  public class ChaptereeRepositoryTest {[m
  [m
      @Autowired[m
[1mdiff --cc src/test/java/com/agileactors/chapteree_app/repository/CustomerRepositoryTest.java[m
[1mindex 226e874,7c15efb..0000000[m
[1m--- a/src/test/java/com/agileactors/chapteree_app/repository/CustomerRepositoryTest.java[m
[1m+++ b/src/test/java/com/agileactors/chapteree_app/repository/CustomerRepositoryTest.java[m
[36m@@@ -13,45 -13,45 +13,89 @@@[m [mimport static org.junit.Assert.assertFa[m
  import static org.junit.jupiter.api.Assertions.assertEquals;[m
  [m
  @SpringBootTest[m
[32m++<<<<<<< HEAD[m
[32m +@TestPropertySource(locations = "classpath:application_test.properties")[m
[32m +public class CustomerRepositoryTest {[m
[32m +[m
[32m +        @Autowired[m
[32m +        CustomerRepository customerRepository;[m
[32m +[m
[32m +        @Test[m
[32m +        void findAll() {[m
[32m +            List<Customer> customers = customerRepository.findAll();[m
[32m +            assertEquals(3, customers.size() , "We should have 3 customers!");[m
[32m +        }[m
[32m +[m
[32m +        @Test[m
[32m +        @Transactional[m
[32m +        void getOne() {[m
[32m +            Customer customer = customerRepository.getOne(2L);[m
[32m +            assertEquals("Menelaos", customer.getFirstName());[m
[32m +            assertEquals("Nikitakis", customer.getLastName());[m
[32m +        }[m
[32m +[m
[32m +        @Test[m
[32m +        void save() {[m
[32m +            Customer customer = new Customer(4L, "Stavros", "Kosmapetris");[m
[32m +            Customer newCustomer = customerRepository.save(customer);[m
[32m +            assertEquals("Stavros", newCustomer.getFirstName());[m
[32m +            assertEquals("Kosmapetris", newCustomer.getLastName());[m
[32m +            customerRepository.deleteById(newCustomer.getCustomerId());[m
[32m +        }[m
[32m +[m
[32m +        @Test[m
[32m +        void delete() {[m
[32m +            Customer customer = new Customer(4L, "Stavros", "Kosmapetris");[m
[32m +            Customer newCustomer = customerRepository.save(customer);[m
[32m +            customerRepository.deleteById(newCustomer.getCustomerId());[m
[32m +            assertFalse(customerRepository.existsById(newCustomer.getCustomerId()));[m
[32m +        }[m
[32m +[m
[32m +        @Test[m
[32m +        void myChapterees() {[m
[32m +            assertEquals(2 , customerRepository.myChapterees(2L).size());[m
[32m +        }[m
[32m++=======[m
[32m+ @TestPropertySource(locations = "classpath:application-flyway_test.properties")[m
[32m+ public class CustomerRepositoryTest {[m
[32m+ [m
[32m+     @Autowired[m
[32m+     CustomerRepository customerRepository;[m
[32m+ [m
[32m+     @Test[m
[32m+     void findAll() {[m
[32m+         List<Customer> customers = customerRepository.findAll();[m
[32m+         assertEquals(3, customers.size() , "We should have 3 customers!");[m
[32m+     }[m
[32m+ [m
[32m+     @Test[m
[32m+     @Transactional[m
[32m+     void getOne() {[m
[32m+         Customer customer = customerRepository.getOne(2L);[m
[32m+         assertEquals("Menelaos", customer.getFirstName());[m
[32m+         assertEquals("Nikitakis", customer.getLastName());[m
[32m+     }[m
[32m+ [m
[32m+     @Test[m
[32m+     void save() {[m
[32m+         Customer customer = new Customer(4L, "Stavros", "Kosmapetris");[m
[32m+         Customer newCustomer = customerRepository.save(customer);[m
[32m+         assertEquals("Stavros", newCustomer.getFirstName());[m
[32m+         assertEquals("Kosmapetris", newCustomer.getLastName());[m
[32m+         customerRepository.deleteById(newCustomer.getCustomerId());[m
[32m+     }[m
[32m+ [m
[32m+     @Test[m
[32m+     void delete() {[m
[32m+         Customer customer = new Customer(4L, "Stavros", "Kosmapetris");[m
[32m+         Customer newCustomer = customerRepository.save(customer);[m
[32m+         customerRepository.deleteById(newCustomer.getCustomerId());[m
[32m+         assertFalse(customerRepository.existsById(newCustomer.getCustomerId()));[m
[32m+     }[m
[32m+ [m
[32m+     @Test[m
[32m+     void myChapterees() {[m
[32m+         assertEquals(2 , customerRepository.myChapterees(2L).size());[m
[32m+     }[m
[32m++>>>>>>> origin/orebranch[m
  }[m
[1mdiff --cc src/test/java/com/agileactors/chapteree_app/service/CustomerServiceTest.java[m
[1mindex df52fd9,5007e1b..0000000[m
[1m--- a/src/test/java/com/agileactors/chapteree_app/service/CustomerServiceTest.java[m
[1m+++ b/src/test/java/com/agileactors/chapteree_app/service/CustomerServiceTest.java[m
[36m@@@ -2,6 -2,7 +2,10 @@@[m [mpackage com.agileactors.chapteree_app.s[m
  [m
  import com.agileactors.chapteree_app.model.Customer;[m
  import com.agileactors.chapteree_app.repository.CustomerRepository;[m
[32m++<<<<<<< HEAD[m
[32m++=======[m
[32m+ import com.agileactors.chapteree_app.repository.CustomerRepositoryTest;[m
[32m++>>>>>>> origin/orebranch[m
  import org.junit.jupiter.api.BeforeEach;[m
  import org.junit.jupiter.api.Test;[m
  [m
[1mdiff --cc src/test/resources/db/migration/V2__setup.sql[m
[1mindex ef2f4a3,46c7284..0000000[m
[1m--- a/src/test/resources/db/migration/V2__setup.sql[m
[1m+++ b/src/test/resources/db/migration/V2__setup.sql[m
[36m@@@ -1,13 -1,13 +1,27 @@@[m
  DELETE FROM chapteree;[m
[32m++<<<<<<< HEAD[m
[32m +INSERT INTO chapteree (first_name, last_name, chapter, level, customer_id)[m
[32m +VALUES ('Kostas', 'Konstantinou', 'Java', 'MID', NULL),[m
[32m +       ('Anna','Pratikaki','ArtAndMotion', 'HIGH', '2'),[m
[32m +       ('Dimitris','Anagnostakis','DevOps', 'LOW', NULL),[m
[32m +        ('Nikos', 'Nikolakis', 'JavascriptFrontend', 'MID', '2'),[m
[32m +       ('Anastasis','Georgiou','AnalyticsAndLiterature', 'HIGH', NULL),[m
[32m +       ('Filippos','Koniaris','ManagementAndGardening', 'LOW', NULL);[m
[32m++=======[m
[32m+ INSERT INTO chapteree (first_name, last_name, chapter, level, coach_id, customer_id)[m
[32m+ VALUES ('Kostas', 'Konstantinou', 'Java', 'MID', '2', NULL),[m
[32m+        ('Anna','Pratikaki','ArtAndMotion', 'HIGH', null, '2'),[m
[32m+        ('Dimitris','Anagnostakis','DevOps', 'LOW', '2', NULL),[m
[32m+         ('Nikos', 'Nikolakis', 'JavascriptFrontend', 'MID', '1', '2'),[m
[32m+        ('Anastasis','Georgiou','AnalyticsAndLiterature', 'HIGH', '3', NULL),[m
[32m+        ('Filippos','Koniaris','ManagementAndGardening', 'LOW', '1', NULL);[m
[32m++>>>>>>> origin/orebranch[m
  [m
  INSERT INTO customer (first_name, last_name)[m
  VALUES ('Ioannis', 'Niki